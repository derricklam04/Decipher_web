[{"/Users/derricklam/Document/decipher/my-app/src/Components/HistoryCard.js":"1","/Users/derricklam/Document/decipher/my-app/src/Components/Home.js":"2","/Users/derricklam/Document/decipher/my-app/src/reportWebVitals.js":"3","/Users/derricklam/Document/decipher/my-app/src/App.js":"4","/Users/derricklam/Document/decipher/my-app/src/Components/Settings.js":"5","/Users/derricklam/Document/decipher/my-app/src/Components/Buttons/Swap.js":"6","/Users/derricklam/Document/decipher/my-app/src/Components/Modal/ResultCards.js":"7","/Users/derricklam/Document/decipher/my-app/src/Components/InputForm.js":"8","/Users/derricklam/Document/decipher/my-app/src/Components/Buttons/Switch.js":"9","/Users/derricklam/Document/decipher/my-app/src/Components/Modal/ResultsModal.js":"10","/Users/derricklam/Document/decipher/my-app/src/index.js":"11","/Users/derricklam/Document/decipher/my-app/src/Components/Modal/WelcomeModal.js":"12","/Users/derricklam/Document/decipher/my-app/src/Components/Modal/ErrorModal.js":"13","/Users/derricklam/Document/decipher/my-app/src/Components/Buttons/Clear.js":"14","/Users/derricklam/Document/decipher/my-app/src/Components/NavBar.js":"15","/Users/derricklam/Document/decipher/my-app/src/Components/Footer.js":"16","/Users/derricklam/Document/decipher/my-app/src/Components/About.js":"17"},{"size":2279,"mtime":1610760910144,"results":"18","hashOfConfig":"19"},{"size":8897,"mtime":1610920229477,"results":"20","hashOfConfig":"19"},{"size":362,"mtime":1609473578156,"results":"21","hashOfConfig":"19"},{"size":2707,"mtime":1610920784830,"results":"22","hashOfConfig":"19"},{"size":2603,"mtime":1610681029491,"results":"23","hashOfConfig":"19"},{"size":442,"mtime":1609791742742,"results":"24","hashOfConfig":"19"},{"size":1790,"mtime":1610665384137,"results":"25","hashOfConfig":"19"},{"size":5121,"mtime":1610760634733,"results":"26","hashOfConfig":"19"},{"size":520,"mtime":1610681420667,"results":"27","hashOfConfig":"19"},{"size":1577,"mtime":1610760764153,"results":"28","hashOfConfig":"19"},{"size":718,"mtime":1610230658608,"results":"29","hashOfConfig":"19"},{"size":1014,"mtime":1610508892407,"results":"30","hashOfConfig":"19"},{"size":1144,"mtime":1610334166718,"results":"31","hashOfConfig":"19"},{"size":345,"mtime":1609702840157,"results":"32","hashOfConfig":"19"},{"size":564,"mtime":1610914458615,"results":"33","hashOfConfig":"19"},{"size":409,"mtime":1610759637526,"results":"34","hashOfConfig":"19"},{"size":7856,"mtime":1610921113152,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"39"},"27eoqo",{"filePath":"40","messages":"41","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"57"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"45"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83"},"/Users/derricklam/Document/decipher/my-app/src/Components/HistoryCard.js",["84"],"import React from 'react';\nimport { Card, Button, Row, Col} from 'react-bootstrap'\nimport arrow from '../Icons/right-arrow.png'\n\n\n\nexport const HistoryCard = ({cards, onCardClick, onCardDelete}) => {\n\n    const handleClick = (id) =>{\n        onCardClick(id)\n    }\n    const handleDelete = (event, id) =>{\n        event.stopPropagation()\n        onCardDelete(id)\n    }\n\n    if(cards.length === 0){\n        return (\n            <p className=\"empty\">No History to Display</p>\n        )\n    }\n    else{\n\n        return(\n            <div id=\"scrollBar\">\n                {cards.slice(0).reverse().map((card) => {\n                    return(\n                    <>\n                        <Card className=\"historyCard\" style={{ width: 'auto', height: '9.3rem'}} key={card.id} >\n                            \n                            <Card.Body>\n                                <Card.Subtitle style={{maxHeight: '1rem', maxWidth:'25rem', overflow:\"hidden\"}}>{card.key}</Card.Subtitle>\n                                <Row>\n                                    <Col>\n                                    <Card.Text style={{ maxHeight: '4.5rem', overflow:\"hidden\"}} >{card.content}</Card.Text>\n                                    </Col>\n                                    <img className=\"arrow\" height={15} src={arrow}/>\n                                    <Col>\n                                    <Card.Text style={{maxHeight: '4.5rem',  overflow:\"hidden\"}} >{card.translated}</Card.Text>\n                                    </Col>\n                                </Row>\n                            </Card.Body>\n                            <Card.Header style={{ width: 'auto'}}>\n                                    <Card.Text style={{color:\"#525252\"}}>{card.translateType}ed</Card.Text>\n                                    <Button size=\"sm\" variant=\"outline-danger\" style={{border:\"none\"}} onClick={(event) => handleDelete(event, card.id)}>Remove</Button>\n                                    <Button size=\"sm\" variant=\"outline-info\" style={{border:\"none\"}} onClick={() => handleClick(card.id)}>View</Button>\n\n                            </Card.Header>\n                        </Card>\n                    </>\n                    )\n                })}\n            </div>\n        )\n    }\n}",["85","86"],"/Users/derricklam/Document/decipher/my-app/src/Components/Home.js",["87","88","89","90","91"],"import React, {useState, useEffect, useReducer} from 'react';\nimport { HistoryCard } from './HistoryCard'\nimport { InputForm } from './InputForm'\nimport {Settings} from './Settings'\nimport { ErrorModal } from './Modal/ErrorModal'\nimport { ResultsModal } from './Modal/ResultsModal'\nimport { WelcomeModal } from './Modal/WelcomeModal'\nimport { Switch } from './Buttons/Switch'\n\nimport PerfectScrollbar from 'react-perfect-scrollbar'\nimport Swal from \"sweetalert2\";  \n\n\nimport {ReactComponent as Setting} from '../Icons/settings.svg'\nimport {ReactComponent as History} from '../Icons/history.svg'\n\nimport { Row, Col, Card, Tab, Tabs} from 'react-bootstrap'\n\nexport const Home = ({onShowError, onShowResults}) => {\n    \n    const [showErrorModal, setErrorModal] = useState(false);\n    const handleCloseError = () => setErrorModal(false);\n    const handleShowError = () => {\n        setResultsModal(false);\n        onShowError()\n    }\n    const [showResultsModal, setResultsModal] = useState(false);\n    const handleCloseResults = () => {\n        setResultsModal(false);\n        setResults([])\n    }\n    const handleShowResults = () => {\n        // onShowResults()\n        setResultsModal(true);\n    }\n    const [results, setResults] = useState([]);\n\n    const [showWelcomeModal, setWelcomeModal] = useState(false);\n    const handleCloseWelcome = () => {\n        setWelcomeModal(false);\n    }\n\n    const [cards, setCards] = useState([]) // [{'content': 'hello', 'key': 'key', 'translated': 'translated'}]\n    const [cardId, setCardId] = useState(0)\n    const [type, setType] = useState('#decrypt')\n    const [save, setSave] = useState(true)\n\n    const [ic, setIc] = useState(0.0615)\n    const [freqTable, setFreqTable] = useState(\"wiki\")\n\n    const [keyError, setKeyError] = useState(false)\n    const [lengthError, setLengthError] = useState(false)\n\n    const [userInput, setUserInput] = useReducer(\n        (state, newState) => ({...state,  ...newState}),\n        {\n            addCard: '',\n            key: '',\n            keyLength: '',\n            translated: ''\n        }\n    )\n\n    const [historyColor, setHistoryColor] = useState(\"black\")\n    const [settingColor, setSettingColor] = useState(\"#4287f5\")\n    const changeIconColor = (event) =>{\n        if(event===\"history\"){\n            setHistoryColor(\"black\")\n            setSettingColor(\"#4287f5\")\n        }else if(event ===\"advanced\"){\n            setHistoryColor(\"#4287f5\")\n            setSettingColor(\"black\")\n        }\n    }\n\n    const handleFormChange = (event) => {\n        const {name, value} = event.target;\n        setUserInput({[name]:value})\n        if(name===\"key\"){\n            if(value===\"\")setKeyError(false);\n            setUserInput({keyLength: ''});\n        }\n        if(name===\"keyLength\"){\n            if(value===\"\")setLengthError(false);\n            setUserInput({key: ''});\n        }\n    }\n\n    const handleFormSubmit = () => {\n        var sendJob = true\n        if (/[^a-zA-Z]/.test(userInput.key)){\n            setKeyError(true)\n            sendJob =false\n        }else{\n            setKeyError(false)\n        }\n        if(isNaN(userInput.keyLength)){\n            setLengthError(true)\n            sendJob =false\n        }else{\n            setLengthError(false)\n        }\n\n        if(sendJob){\n            if (type==='#decrypt' && userInput.key===\"\" && userInput.keyLength===\"\"){\n                handleShowResults();\n            }\n            fetch('api/create', {\n                method: 'POST',\n                body: JSON.stringify({\n                    content: userInput.addCard,\n                    key: userInput.key,\n                    keyLength: userInput.keyLength,\n                    type: type,\n                    save: save,\n\n                    ic: ic,\n                    freqTable: freqTable\n                }),\n                headers: {\n                    \"Content-type\": \"application/json; charset=UTF-8\"\n                }\n            }).then(response => response.json())\n            .then(message=> {\n                    console.log(message)\n                    if(message['error']==='true'){\n                        handleShowError();\n                    }else if(message['multiple']==='true'){\n                        setResults(message['results'])\n                    }else{\n                        setResultsModal(false);\n                        setUserInput({translated: message['translatedText'] });\n                        setUserInput({key: message['key'] });\n                        if (save){\n                            addToCards(userInput.addCard, message['key'], message['translatedText'], type)\n                        }\n                    }\n            })\n        }\n    }\n\n    const addToCards = (addCard, key, translated, type) => {\n        cards.push({'id': cardId, 'content': addCard, 'key': key, \n            'translated': translated, 'translateType': type})\n        setCardId(cardId+1)\n        console.log(cards)\n    }\n\n\n    const handleFormClear = () => {\n        setUserInput({addCard: ''});\n        setUserInput({key: ''});\n        setUserInput({keyLength: ''});\n        setUserInput({translated: ''});\n        setLengthError(false)\n        setKeyError(false)\n\n    }\n    const handleCardClick = (id) => {\n        for(var i=0; i<cards.length; i ++){\n            if (cards[i]['id'] == id){\n                setUserInput({addCard: cards[i].content});\n                setUserInput({key: cards[i].key});\n                setUserInput({translated: cards[i].translated});\n                break;\n            }\n        }\n    }\n    const handleCardDelete = (id) =>{\n        for(var i=0; i<cards.length; i ++){\n            if (cards[i]['id'] == id){\n                cards.splice(i, 1);\n                setUserInput();\n                break;\n            }\n        }\n    }\n\n    const handleToggle = (event) => {\n        setType(event)\n    }\n\n    const handleSwap = () =>{\n        var temp = userInput.addCard;\n        setUserInput({addCard: userInput.translated});\n        setUserInput({translated: temp});\n    }\n    const handleSwitch = () => {\n        setSave(!save)\n    }\n\n    const handleClearKey = () => {\n        setUserInput({keyLength: ''});\n    }\n\n    const handleIcChange = (icChange) => {\n        setIc(icChange/10000)\n        console.log(icChange)\n    }\n\n    const handleFreqChange = (event) => {\n        setFreqTable(event)\n        console.log(event)\n    }\n\n    const handleSelect = (key, value) => {\n        setUserInput({translated: value});\n        setUserInput({key: key});\n        handleCloseResults();\n        setResults([]);\n\n        if (save){\n            addToCards(userInput.addCard, key, value, type)\n        }\n    }\n\n    return (\n        <div className=\"home-wrapper\">\n            <ErrorModal showModal={showErrorModal} onClose={handleCloseError}/>\n            <ResultsModal showModal={showResultsModal} onClose={handleCloseResults} cards={results} onSelect={handleSelect}/>\n            <WelcomeModal showModal={showWelcomeModal} onClose={handleCloseWelcome}/>\n            <Row className=\"home\">\n                <Col md={8} className=\"inputForm\">\n                    <InputForm userInput={userInput} setUserInput={setUserInput} onFormChange={handleFormChange} onFormSubmit={handleFormSubmit} \n                    onFormClear={handleFormClear} onToggle={handleToggle} onSwap={handleSwap} onSwitch={handleSwitch} onClearKey={handleClearKey} \n                    onKeyError={keyError} onLengthError={lengthError}/>\n                </Col>\n        \n                <Col md={4} className=\"tabs\" >  \n                    <Switch className=\"save-switch\" onSwitch={handleSwitch}/>\n  \n                    <Tabs className=\"tabs-header\"defaultActiveKey=\"history\" id=\"uncontrolled-tab-example\" onSelect={changeIconColor} >\n                         <Tab eventKey=\"history\" title={<span>History<History className=\"icons\" style={{height:16, width:16}} fill={historyColor}/></span>} \n                            style={{ width: \"auto\", height: window.innerHeight-166, paddingRight:0}} >\n                             <PerfectScrollbar>\n                                 <Card.Body>\n                                 <HistoryCard cards={cards} type={type} onCardClick={handleCardClick} onCardDelete={handleCardDelete}/>\n                                 </Card.Body>\n                             </PerfectScrollbar>\n                         </Tab>\n                        <Tab eventKey=\"advanced\" title={<span>Advanced Settings<Setting className=\"icons\" style={{height:16, width:16}} fill={settingColor}/></span>}\n                             style={{ width: \"auto\", height: window.innerHeight-166, paddingRight:0}} >  \n                            <Settings onIcChange={handleIcChange} onFreqChange={handleFreqChange} freqTable={freqTable}/>\n                        </Tab>\n                    </Tabs>\n                </Col>\n            </Row>\n            <br />\n        </div>\n    )\n}","/Users/derricklam/Document/decipher/my-app/src/reportWebVitals.js",[],["92","93"],"/Users/derricklam/Document/decipher/my-app/src/App.js",["94","95","96","97","98","99","100"],"import './App.scss';\nimport { Home } from './Components/Home'\nimport { About } from './Components/About'\n\nimport { NavBar} from './Components/NavBar'\nimport { Footer} from './Components/Footer'\nimport { ResultsModal } from './Components/Modal/ResultsModal'\nimport title from './Icons/title.png'\n\nimport Swal from \"sweetalert2\";  \nimport {BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-perfect-scrollbar/dist/css/styles.css';\n\n\n\nfunction App() {\n  if(window.location.pathname === \"/\"){\n    Swal.fire({\n      title: '<strong>Welcome to Vigenère Code Cracker</strong>',\n      width: '800px',\n      html:\n        '<h5>To get started, paste the following encrypted text into the input area.</h5><h5>Then hit <b>Submit</b> to discover more!</h5>' +\n        '<p>-</p><p>Xwtkeekygizmbrj! Cjc neii aynb jipvptomj cbyi jdzyx Imxiimxi rrtvtxziq qvwnimi! Lsl gvv tsj gyeiok frxnizv Jipvpto ith Rrtvtxz qbhv ft akprgkmio zlr xrfn ihsii, Pspz xipiex lckvvij adtr fr wrzzl (iea fv xjomprh FR vvj SSJ) zr opk lvwksmg zeo se xcm xmtlk. Xcm hsyh nsmtj eg xyi owv ingy upmxc eigvzakrgw klz \\‘Skc\\’ hwvh. Iwzi glrx opkvr mj egau ea Euzvviiq Wvxoqtkf Xrf ow isajzkpzk hrgickbosa eckjzoxuq klmmylbpuw. Awxqrv zrawxqnxzsi, ou xb \\‘Pvemv Ssei\\’ zr opk rnzzkvbosa frv. Zvpsl!</p>' +\n        '<p>-</p><h7><b>Note:</b> This deployment of the ‘Vigenère Code Cracker” does not support a persistence database for storing history. For the completed version, please visit the repository at GitHub which integrates SQLAlchemy. </h7>',\n      focusConfirm: true,\n      confirmButtonText: 'Let\\'s get started',\n    })\n  }\n\n  const handleShowError = () => {\n    Swal.fire({\n      icon: 'error',\n      width: '750px',\n      title: 'Error...',\n      confirmButtonText: 'Go Back',\n      text: 'Unable to decrypt inputted cipher text!',\n      footer: '<p>Possible Reasons:</p>'+\n            '<ul>' +\n            '<li>The Cipher Text is too short for Frequency Analysis</li>' +\n            '<li>The Cipher Text is not derived from a Vigenère Encryption of a plaintext</li>' +\n            '</ul>'\n    })\n  }\n  const handleShowResults = () =>{\n    Swal.fire({\n      width: '750px',\n      title: 'Error...',\n      confirmButtonText: 'Go Back',\n      text: '<ResultsModal/>',\n      footer: ''\n    })\n  }\n\n  return (\n    <Router>\n    <div className=\"App\">\n      <img className=\"nav-title\" height={50} src={title}/>\n      <NavBar/>\n      <Route path=\"/\" exact component={Home} onShowError={handleShowError} onShowResults={handleShowResults}/>\n      <Route path=\"/about\" component={About}/>\n      <Footer/>\n    </div>\n    </Router>\n  );\n}\n\nexport default App;\n","/Users/derricklam/Document/decipher/my-app/src/Components/Settings.js",[],["101","102"],"/Users/derricklam/Document/decipher/my-app/src/Components/Buttons/Swap.js",["103"],"import React from 'react';\nimport { Button } from 'react-bootstrap'\nimport icon from \"../../Icons/swap.png\"\n\nexport const Swap = ({onSwap, disabled}) => {\n\n\n    const handleSwap = () => {\n        onSwap()\n    }\n\n    return (\n        <div>\n            <Button className=\"swap\" onClick={handleSwap} variant=\"primary\" disabled={disabled}>\n                <img className=\"img\" height=\"24\" src={icon}/>\n            </Button>\n        </div>\n    )\n}","/Users/derricklam/Document/decipher/my-app/src/Components/Modal/ResultCards.js",[],["104","105"],"/Users/derricklam/Document/decipher/my-app/src/Components/InputForm.js",["106"],"import React, {useState} from 'react';\nimport { Clear } from './Buttons/Clear'\nimport { Swap } from './Buttons/Swap'\nimport { ReactComponent as Lock} from '../Icons/lock.svg'\nimport { ReactComponent as Unlock} from '../Icons/unlock.svg'\n\n\nimport { Card, Nav, Form, Button, Col, OverlayTrigger, Tooltip } from 'react-bootstrap'\n\n\n\nexport const InputForm = ( {userInput, onFormChange, onFormSubmit, onFormClear, onToggle, onSwap, onSwitch, onClearKey, onKeyError, onLengthError} ) => {\n\n    const [disableKeyLength, setDisableKeyLength] = useState(false)\n    const [requireKey, setRequireKey] = useState(false)\n    const [lockColor, setLockColor] = useState(\"#4287f5\")\n    const [unlockColor, setUnlockColor] = useState(\"black\")\n\n    const [placeholder, setPlaceholder] = useState(\"Input Here... \\n\\nLeave 'Key' or 'Key Length' empty if unknown\")\n\n    const handleChange = (event) => {\n        onFormChange(event)\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault()\n        onFormSubmit()\n        \n    }\n\n    const handleClear = () => {\n        onFormClear()\n    }\n\n    const handleToggle = (event) => {\n        onToggle(event)\n        if(event === \"#encrypt\"){\n            setDisableKeyLength(true)\n            setRequireKey(true)\n            setLockColor(\"black\")\n            setUnlockColor(\"#4287f5\")\n\n            onClearKey()\n            setPlaceholder(\"Input Here...\")\n\n        }else if(event === \"#decrypt\"){\n            setDisableKeyLength(false)\n            setRequireKey(false)\n            setLockColor(\"#4287f5\")\n            setUnlockColor(\"black\")\n\n            setPlaceholder(\"Input Here... \\n\\nLeave 'Key' or 'Key Length' empty if unknown\")\n        }\n    }\n\n    const handleSwap = () => {\n        onSwap()\n    }\n\n    const handleSwitch = () => {\n        onSwitch()\n    }\n    \n    return(\n        <>        \n        <Card style={{height: window.innerHeight-110}}>\n            <Card.Header>\n                <Nav variant=\"tabs\" defaultActiveKey=\"#decrypt\" onSelect={handleToggle}>\n                <Nav.Item>\n                    <Nav.Link href=\"#decrypt\" >Decrypt<Unlock className=\"locks\" style={{height:16, width:16}} fill={unlockColor}/></Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                    <Nav.Link href=\"#encrypt\" >Encrypt<Lock className=\"locks\" style={{height:16, width:16}} fill={lockColor}/></Nav.Link>\n                </Nav.Item>\n                </Nav>\n            </Card.Header>\n            <Card.Body>\n                <Form onSubmit={handleSubmit} noValidate>\n                    <Form.Group>\n                        <Form.Control as=\"textarea\" placeholder={placeholder} rows={window.innerHeight/70} name=\"addCard\" required \n                            value={userInput.addCard} onChange={handleChange}/>\n                    </Form.Group>\n\n                    <Form.Group>\n                    <Form.Row>\n                        <Col md={5}>\n                        <OverlayTrigger key='bottom' placement='bottom' \n                            overlay={<Tooltip >Enter <strong>English Letters</strong> Only</Tooltip>}>\n                            <Form.Control type=\"search\" placeholder=\"Enter Key\" name=\"key\" \n                            value={userInput.key} isInvalid={onKeyError} onChange={handleChange} />\n                        </OverlayTrigger>\n                        </Col>\n\n                        <Col md={2}>\n                        <OverlayTrigger key='bottom' placement='bottom' \n                            overlay={<Tooltip>Enter <strong>Numbers</strong> only</Tooltip>}>\n                            <Form.Control type=\"search\" placeholder=\"Key Length\" name=\"keyLength\" isInvalid={onLengthError} \n                                value={userInput.keyLength} onChange={handleChange} disabled={disableKeyLength}/>\n                        </OverlayTrigger>\n                        </Col>\n                        <Col md={{offset:1, span:0}} >\n                            <Swap onSwap={handleSwap} disabled={userInput.addCard === \"\" && userInput.translated === \"\"}/>\n                        </Col>\n                        <Col md=\"auto\" className=\"clearBtn\">\n                            <Clear onFormClear={handleClear} \n                                disabled={userInput.addCard === \"\" && userInput.key === \"\" && userInput.keyLength ===\"\" && userInput.translated === \"\"}/>\n                        </Col>\n                        <Col md=\"auto\">\n                            <Button variant=\"success\" type=\"submit\" \n                            disabled={(requireKey===true && userInput.key === \"\") || userInput.addCard === \"\"}> \n                            Submit </Button>\n                        </Col>\n                    </Form.Row>\n                    </Form.Group>\n\n                    \n                    <Form.Group>\n                        <Form.Control as=\"textarea\" rows={window.innerHeight/80} placeholder =\"Output Here...\" name=\"translated\" value={userInput.translated} onChange={handleChange}/>\n                    </Form.Group>\n                </Form>\n            </Card.Body>\n        </Card>\n        </>\n\n        \n    )\n}","/Users/derricklam/Document/decipher/my-app/src/Components/Buttons/Switch.js",["107","108"],"/Users/derricklam/Document/decipher/my-app/src/Components/Modal/ResultsModal.js",[],"/Users/derricklam/Document/decipher/my-app/src/index.js",[],["109","110"],"/Users/derricklam/Document/decipher/my-app/src/Components/Modal/WelcomeModal.js",["111"],"import React from 'react';\nimport { Button, Modal } from 'react-bootstrap'\nimport Swal from 'sweetalert2'\n\nexport const WelcomeModal = ({showModal, onClose}) => {\n    const handleClose = () => {\n      onClose()\n    }\n    return (\n      <>\n      \n        <Modal\n          size=\"lg\"\n          show={showModal}\n          onHide={handleClose}\n          backdrop=\"static\"\n          keyboard={false}\n          centered\n        >\n          <Modal.Header style={{backgroundColor:'#baedff', display: \"flex\",justifyContent: \"center\",alignItems: \"center\"}}>\n            <Modal.Title style={{color:\"#383838\"}}>Welcome to Vigenère Code Cracker!</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>To get started, \n          </Modal.Body>\n          <Modal.Footer style={{backgroundColor:\"#f5f5f5\",paddingBottom:'0', paddingTop:'0'}}>\n            <Button variant=\"secondary\" onClick={handleClose}>\n              Let's get Started\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </>\n    );\n  }\n  ","/Users/derricklam/Document/decipher/my-app/src/Components/Modal/ErrorModal.js",[],["112","113"],"/Users/derricklam/Document/decipher/my-app/src/Components/Buttons/Clear.js",[],"/Users/derricklam/Document/decipher/my-app/src/Components/NavBar.js",["114"],"import React from 'react';\nimport { Navbar, Nav} from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\n\nexport const NavBar = () => {\n    return (\n        <Navbar className=\"top-nav\" bg=\"\" collapseOnSelect expand=\"lg\" variant=\"dark\">\n            <Nav className=\"links\">\n                <Nav.Link href=\"/\">Home</Nav.Link>\n            </Nav>\n\n            <Navbar.Brand className=\"title\"></Navbar.Brand>\n\n            <Nav className=\"ml-auto links\">\n                <Nav.Link href=\"/about\"> Learn More</Nav.Link>\n            </Nav>\n        </Navbar>\n    )\n}","/Users/derricklam/Document/decipher/my-app/src/Components/Footer.js",[],"/Users/derricklam/Document/decipher/my-app/src/Components/About.js",["115","116","117","118","119"],"import React from 'react';\nimport { Accordion, Button, Card } from 'react-bootstrap'\nimport table from '../Info/table.png'\nimport ic from '../Info/ic.png'\nimport freq from '../Info/freq.png'\nimport shift from '../Info/shift.png'\n\n\nexport const About = () => {\n    return (\n        <div className=\"about\">\n            <Accordion defaultActiveKey=\"1\">\n                <Card>\n                    <Accordion.Toggle as={Card.Header} eventKey=\"0\">\n                        <h5><b>What is the Vigenere Cipher?</b></h5>\n                    </Accordion.Toggle>\n                    <Accordion.Collapse eventKey=\"0\">\n                    <Card.Body>\n                        <p>The Vigenere Cipher is a method of encrypting alphabetic text <i>(known as plain text)</i> based on letter substitution and shifting. This form of cipher can be best depicted using the <b>Vigenere Table.</b></p>\n                        <img src={table}/>\n                        <p>In addition to the plain text, this cipher also requires a secret key which should contain alphabetic text only. To begin encryption, the key is repeated with the goal of matching the number of letters in the plain text <i>(excluding punctuation and spaces)</i>. </p>\n                        <p>For example, if the plain text is “HELLO, ENCRYPTION WORLD!” and the key is “LOCK”, the key will be repeated to the following:\n                            <ul>\n                                <li>HELLO  ENCRYPTION  WORLD</li>\n                                <li>LOCKL  OCKLOCKLOC  KLOCK</li>\n                            </ul>\n                        </p>\n                        <p>For each letter pair in the plaintext and key, find its intersection in the Vigenere Table: \n                            <ul>\n                                <li>HELLO, ENCRYPTION WORLD!</li>\n                                <li>SSNVZ, SPMCMRDTCP GZFNN!</li>\n                            </ul>\n                        </p>\n                        <p>This intersection also represents the shift amount similar to that of a Caesar Cipher. The result of this will be the new encrypted plaintext <i>(known as the cipher text)</i>.</p>\n                    </Card.Body>\n                    </Accordion.Collapse>\n                </Card>\n                <Card>\n                    <Accordion.Toggle as={Card.Header} eventKey=\"1\">\n                    <h5><b>Without knowing the secret key, how can Vigenere Ciphertext be Decrypted? </b></h5>\n                    </Accordion.Toggle>\n                    <Accordion.Collapse eventKey=\"1\">\n                    <Card.Body>\n                        <h6>We can break this problem into two parts:</h6><p></p>\n                        <h5>Part 1 - How can we find the length of the key?</h5>\n                        <ul>\n                            <p>The <b>Index Of Coincidence (IC)</b> is a technique used in cryptography which measures the global distribution of letters in an encrypted message. </p>\n                            <p>The IC could be found by this formula:</p>\n                            <img height={80} src={ic}/>\n                            <p><i>With <b>ni</b> being the number of occurrences of the letter <b>i</b> and <b>N</b> being the total number of letters (26). </i></p>\n                            <p>It is known that the <b>Index of Coincidence of English Text is 0.0667</b>. Given this, we can try to brute force the key length by first assuming that it has a length of 1, then a length of 2, and so on.</p>\n\n                            <p>At each key length assumption, separate the letters in the ciphertext into <b>n = key length</b> number of groups. This can be done by modulus division. \n                            For example, if the ciphertext is ‘abcdefghijklmnop” and we are currently assuming the key length to be 3. The text with be divided into 3 groups as such: \n                                <ul>\n                                    <li>“adgjmp”</li>\n                                    <li>“behkn”</li>\n                                    <li>“cfilo”</li>\n                                </ul>\n                                <p>This step has to be done because we know that for each group formed, all of the letters in the group were ciphered by the same letter in the Vigenere Table. <i>(More on this in Part 2 below)</i></p>\n                            </p>\n                            <p>Calculate the IC of each group and sum it together. Divide the sum by the current assumed key length to get the <b>Final IC</b>. </p>\n                            <p>Finally, compare the Final IC to that of English Text which is 0.0667. <p>If the current Final IC is at least 0.0615, we can assume its key length to correct and move on to the second part below.</p> </p>\n                            <p><i>(NOTE) This stage will rule out many incorrect assumptions to optimize the running time of the algorithm. Note that the number 0.0615 can be configured. A lower value will allow for more “correct” assumptions, while a higher value will rule out more “incorrect” assumptions. </i></p>\n                        </ul>\n                        <h5>Part 2 - How can we use the length assumed in Part 1 to find the key?</h5>\n                        <ul>\n                        <p>The English Frequency Table is the number of times a letter appears on average in Written English Text.</p>\n                        <img height={400} src={freq}/>\n                        <p>We can use <b>Frequency Analysis</b> to find the key letter that was used to cipher the letters in each group from Part 1. \n                        <p>At a high level, since this key letter represents the shift amount, we have to find the amount that each group of letters were shifted by.</p></p>\n\n                        <p>For each group, create a frequency table for the number of occurrences of each letter\n                            <i>(number of occurrence of letter x / total number of letters in group) </i>\n                            and sort this table alphabetically. </p>\n                        <ul>\n                            <p>The next step is to compare this frequency table to the sorted English Frequency Table. \n                                <p>This can be done with <b>Chi-square Statistic</b>, which can measure the correlation between two frequency tables.</p>\n                            </p>\n                            <p>Because there are 26 letters in the alphabet, there are 26 possible shifts that we have to find Chi-square on. \n                                <p>In order to calculate Chi-square for other shifts, simply move all frequency values onto the next letter as such:</p>     \n                            </p>\n                            <img height={400} src={shift}/>\n                            <p style={{textAlign:\"center\"}}><i>(All frequency values shifted to the right by 1)</i></p>\n                            <p>The smaller the value of chi-square, the more resemblance there are between the two tables. Therefore, the shift that results in the smallest chi-square value will be the correct shift amount. \n                                <p>This shift amount can be taken directly to find the key letter. For example, if the shift amount was 5, then the key letter is ‘E’ <i>(the 5th letter in the alphabet)</i>. </p>\n                            </p>\n                        </ul>\n                        <p>Repeat following for each group to find the whole key. \n                            <p>Once the key is retrieved, decryption will be straightforward as it is the reverse of encryption.</p>\n                        </p>\n                        </ul>\n                    </Card.Body>\n                    </Accordion.Collapse>\n                </Card>\n            </Accordion>\n        </div>\n    )\n}",{"ruleId":"120","severity":1,"message":"121","line":37,"column":37,"nodeType":"122","endLine":37,"endColumn":85},{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","replacedBy":"126"},{"ruleId":"127","severity":1,"message":"128","line":1,"column":26,"nodeType":"129","messageId":"130","endLine":1,"endColumn":35},{"ruleId":"127","severity":1,"message":"131","line":11,"column":8,"nodeType":"129","messageId":"130","endLine":11,"endColumn":12},{"ruleId":"127","severity":1,"message":"132","line":43,"column":19,"nodeType":"129","messageId":"130","endLine":43,"endColumn":27},{"ruleId":"133","severity":1,"message":"134","line":161,"column":32,"nodeType":"135","messageId":"136","endLine":161,"endColumn":34},{"ruleId":"133","severity":1,"message":"134","line":171,"column":32,"nodeType":"135","messageId":"136","endLine":171,"endColumn":34},{"ruleId":"123","replacedBy":"137"},{"ruleId":"125","replacedBy":"138"},{"ruleId":"127","severity":1,"message":"139","line":7,"column":10,"nodeType":"129","messageId":"130","endLine":7,"endColumn":22},{"ruleId":"127","severity":1,"message":"140","line":11,"column":34,"nodeType":"129","messageId":"130","endLine":11,"endColumn":40},{"ruleId":"141","severity":1,"message":"142","line":25,"column":329,"nodeType":"143","messageId":"144","endLine":25,"endColumn":330,"suggestions":"145"},{"ruleId":"141","severity":1,"message":"146","line":25,"column":334,"nodeType":"143","messageId":"144","endLine":25,"endColumn":335,"suggestions":"147"},{"ruleId":"141","severity":1,"message":"142","line":25,"column":464,"nodeType":"143","messageId":"144","endLine":25,"endColumn":465,"suggestions":"148"},{"ruleId":"141","severity":1,"message":"146","line":25,"column":476,"nodeType":"143","messageId":"144","endLine":25,"endColumn":477,"suggestions":"149"},{"ruleId":"120","severity":1,"message":"121","line":59,"column":7,"nodeType":"122","endLine":59,"endColumn":59},{"ruleId":"123","replacedBy":"150"},{"ruleId":"125","replacedBy":"151"},{"ruleId":"120","severity":1,"message":"121","line":15,"column":17,"nodeType":"122","endLine":15,"endColumn":62},{"ruleId":"123","replacedBy":"152"},{"ruleId":"125","replacedBy":"153"},{"ruleId":"127","severity":1,"message":"154","line":60,"column":11,"nodeType":"129","messageId":"130","endLine":60,"endColumn":23},{"ruleId":"127","severity":1,"message":"155","line":2,"column":10,"nodeType":"129","messageId":"130","endLine":2,"endColumn":14},{"ruleId":"156","severity":1,"message":"157","line":16,"column":13,"nodeType":"122","endLine":16,"endColumn":124},{"ruleId":"123","replacedBy":"158"},{"ruleId":"125","replacedBy":"159"},{"ruleId":"127","severity":1,"message":"131","line":3,"column":8,"nodeType":"129","messageId":"130","endLine":3,"endColumn":12},{"ruleId":"123","replacedBy":"160"},{"ruleId":"125","replacedBy":"161"},{"ruleId":"127","severity":1,"message":"162","line":3,"column":10,"nodeType":"129","messageId":"130","endLine":3,"endColumn":14},{"ruleId":"127","severity":1,"message":"163","line":2,"column":21,"nodeType":"129","messageId":"130","endLine":2,"endColumn":27},{"ruleId":"120","severity":1,"message":"121","line":20,"column":25,"nodeType":"122","endLine":20,"endColumn":43},{"ruleId":"120","severity":1,"message":"121","line":49,"column":29,"nodeType":"122","endLine":49,"endColumn":56},{"ruleId":"120","severity":1,"message":"121","line":69,"column":25,"nodeType":"122","endLine":69,"endColumn":55},{"ruleId":"120","severity":1,"message":"121","line":83,"column":29,"nodeType":"122","endLine":83,"endColumn":60},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-native-reassign",["164"],"no-negated-in-lhs",["165"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Swal' is defined but never used.","'setCards' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["164"],["165"],"'ResultsModal' is defined but never used.","'Switch' is defined but never used.","no-useless-escape","Unnecessary escape character: \\‘.","Literal","unnecessaryEscape",["166","167"],"Unnecessary escape character: \\’.",["168","169"],["170","171"],["172","173"],["164"],["165"],["164"],["165"],"'handleSwitch' is assigned a value but never used.","'Form' is defined but never used.","react/jsx-pascal-case","Imported JSX component _Switch must be in PascalCase or SCREAMING_SNAKE_CASE",["164"],["165"],["164"],["165"],"'Link' is defined but never used.","'Button' is defined but never used.","no-global-assign","no-unsafe-negation",{"messageId":"174","fix":"175","desc":"176"},{"messageId":"177","fix":"178","desc":"179"},{"messageId":"174","fix":"180","desc":"176"},{"messageId":"177","fix":"181","desc":"179"},{"messageId":"174","fix":"182","desc":"176"},{"messageId":"177","fix":"183","desc":"179"},{"messageId":"174","fix":"184","desc":"176"},{"messageId":"177","fix":"185","desc":"179"},"removeEscape",{"range":"186","text":"187"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"188","text":"189"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"190","text":"187"},{"range":"191","text":"189"},{"range":"192","text":"187"},{"range":"193","text":"189"},{"range":"194","text":"187"},{"range":"195","text":"189"},[1152,1153],"",[1152,1152],"\\",[1157,1158],[1157,1157],[1287,1288],[1287,1287],[1299,1300],[1299,1299]]